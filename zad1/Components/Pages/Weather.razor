@page "/weather"
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>
<p>Incoming warm days: @warmDays</p>

<button @onclick="WarmDaysFilter">Filter warm days</button>
<button @onclick="ResetFilter">Reset filter</button>

<input class="form-control" @oninput="@Input" />.,

@if (forecasts == null) {
    <p><em>Loading...</em></p>
} else {
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts) {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    private WeatherForecast[]? forecasts;
    private WeatherForecast[]? originalForecasts;
    private int warmDays = 0;

    protected override async Task OnInitializedAsync() {


        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 10).Select(index => new WeatherForecast {
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = summaries[Random.Shared.Next(summaries.Length)]

            }).ToArray();

        originalForecasts = forecasts.ToArray();


        foreach (var forecast in forecasts) {
            if (forecast.TemperatureC >= 15) {
                warmDays++;
            }
        }

    }



    private class WeatherForecast {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);

    }

    public void WarmDaysFilter() {
        //WeatherForecast[]? warmForecast;
        forecasts = originalForecasts.Where(x => x.TemperatureC >= 15).ToArray();

    }

    public void ResetFilter() {
        forecasts = originalForecasts.ToArray();
    }

    private void Input(ChangeEventArgs arg) {
        //forecasts = originalForecasts.Contains(arg.Value.ToString());
        var filteredForecasts =
        from _forecasts in originalForecasts
        where _forecasts.Summary.Contains(arg.Value.ToString())
        select _forecasts;

        forecasts = filteredForecasts.ToArray();
    }
}
