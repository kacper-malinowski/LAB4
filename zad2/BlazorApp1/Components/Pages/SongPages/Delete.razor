@page "/songs/delete"
@inject BlazorApp1.Data.ApplicationDbContext DB
@using BlazorApp1
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Song</h4>
    <hr />
    @if (song is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">SongTitle</dt>
            <dd class="col-sm-10">@song.SongTitle</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">SongArtist</dt>
            <dd class="col-sm-10">@song.SongArtist</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ReleaseDate</dt>
            <dd class="col-sm-10">@song.ReleaseDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Rating</dt>
            <dd class="col-sm-10">@song.Rating</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">RatingCount</dt>
            <dd class="col-sm-10">@song.RatingCount</dd>
        </dl>
        <EditForm method="post" Model="song" OnValidSubmit="DeleteSong" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(song is null)">Delete</button> |
            <a href="/songs">Back to List</a>
        </EditForm>
    }
</div>

@code {
    Song? song;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        song = await DB.Song.FirstOrDefaultAsync(m => m.Id == Id);

        if (song is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteSong()
    {
        DB.Song.Remove(song!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/songs");
    }
}
